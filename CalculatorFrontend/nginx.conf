events { }

http {
    # Use Docker's internal DNS server
    resolver 127.0.0.11 valid=10s;

    upstream plus_backend {
        least_conn;  # Use least connections load balancing method
        server plusservice:80;
    }

    upstream minus_backend {
        least_conn; 
        server minusservice:80;
    }

    upstream multiply_backend{
        least_conn;
        server multiplyservice:80;
    }

    upstream history_backend {
        least_conn;
        server historyservice:80;
    }

    upstream featurehub_backend {
        least_conn;
        server featurehub:8085;
    }

    upstream angular_backend {
        least_conn;
        server angular-app:4200;
    }

    server {
        listen 8081;

        location / {
            proxy_pass http://angular_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header traceparent $http_traceparent;
            proxy_set_header tracestate $http_tracestate;
        }

        location /Plus {
            proxy_pass http://plus_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header traceparent $http_traceparent;
            proxy_set_header tracestate $http_tracestate;
        }

        location /Minus {
            proxy_pass http://minus_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header traceparent $http_traceparent;
            proxy_set_header tracestate $http_tracestate;
        }
        location /Multiply {
            proxy_pass http://multiply_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header traceparent $http_traceparent;
            proxy_set_header tracestate $http_tracestate;
        }
        location /FeatureHub {
            proxy_pass http://featurehub_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header traceparent $http_traceparent;
            proxy_set_header tracestate $http_tracestate;

            # Add the CORS headers to allow all origins
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'Origin, X-Requested-With, Content-Type, Accept' always;
            if ($request_method = 'OPTIONS') {
                # Pre-flight request response
                add_header 'Access-Control-Allow-Origin' '*';
                add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
                add_header 'Access-Control-Allow-Headers' 'Origin, X-Requested-With, Content-Type, Accept';
                add_header 'Access-Control-Max-Age' 1728000;
                add_header 'Content-Type' 'text/plain charset=UTF-8';
                add_header 'Content-Length' 0;
                return 204;
            }
        }

        location /History {
            proxy_pass http://history_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header traceparent $http_traceparent;
            proxy_set_header tracestate $http_tracestate;
        }
        location /api/v2/spans {
            proxy_pass http://zipkin:9411/api/v2/spans;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }
    }

    # This server block will listen on port 8084 for History service
    server {
        listen 8084;

        location / {
            proxy_pass http://history_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header traceparent $http_traceparent;
            proxy_set_header tracestate $http_tracestate;
        }
    }
}
